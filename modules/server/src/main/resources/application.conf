gwi {
  server {
    port = 8080
    ip = "localhost"
  }
  backpressure {
    buffer-size = 10000
    queue-size = 1000
  }
  concurrency-factor = 2
  concurrency-factor = ${?CONCURRENCY_FACTOR}
  db {
      url = "127.0.0.1"
      url = ${?POSTGRES_URL}
      database = "gwi"
      database = ${?POSTGRES_DB}
      user = "gwi"
      user = ${?POSTGRES_USERNAME}
      password = "dev"
      password = ${?POSTGRES_PASSWORD}
  }
}

akka.http {
  client{
    stream-cancellation-delay = 5 minutes
    idle-timeout = infinite
  }

  routing {
    verbose-error-messages = on

    # The maximum number of bytes per ByteString a decoding directive will produce
    # for an entity data stream.
#    decode-max-bytes-per-chunk = 1m

    # Maximum content length after applying a decoding directive. When the directive
    # decompresses, for example, an entity compressed with gzip, the resulting stream can be much
    # larger than the max-content-length. Like with max-content-length, this is not necessarilly a
    # problem when consuming the entity in a streaming fashion, but does risk high memory use
    # when the entity is made strict or marshalled into an in-memory object.
    # This limit (like max-content-length) can be overridden on a case-by-case basis using the
    # withSizeLimit directive.
    decode-max-size = 8m
  }

  server.preview.enable-htp2 = on
}

# Load using SlickSession.forConfig("slick-postgres")
slick-postgres {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    connectionPool = "HikariCP"
    numThreads = 10
    dataSourceClass = "slick.jdbc.DriverDataSource"
    properties = {
      driver = "org.postgresql.Driver"
      url = "jdbc:postgresql://"${gwi.db.url}"/"${gwi.db.database}
      user = ${gwi.db.user}
      password = ${gwi.db.password}
    }
  }
}